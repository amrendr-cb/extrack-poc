class CB_Analytics {
  constructor() {
    this._now = (new Date).getTime();
    this._random = Math.random() * 99999999999;
    this._cba_tracker_key = '___cba';
    this._document = document;
    this._body = this._document.body;
    this._documentElement = this._document.documentElement;
    this._window = window;
    this._location = this._window.location;
    this._screen = this._window.screen;
    this._navigator = this._window.navigator;
    this._sessionStorage = this._window.sessionStorage;
  };

  collectData = function () {
    try {
      // generate the url
      var pix = this._document.createElement("img");
      var url = this.baseurl + "&d=" + this.buildData();
      pix.src = url;
      pix.style.display = "none";
      this._body.appendChild(pix);

      // any required cleanup
      this.cleanup();
    } catch (e) {
      // console.error(e);
    }
  };
  buildData = function () {

    // We preserve the property name of json object during minifying using output.json
    let data = {};

    try {
      // Current time
      data['tn'] = this._now;
      // Random number
      // Avoid collision if same configuration generated at same time
      data['rn'] = this._random;
      // Address bar url when this data is collected
      data['dl'] = this._location.href;
      // Referrer of page
      data['dr'] = this._document.referrer;
      // Screen resolution *** height x width x color depth ***
      data['sr'] = this._screen.height + 'x' + this._screen.width + 'x' + this._screen.pixelDepth;
      // Viewport size
      data['vr'] = this._documentElement.clientHeight + 'x' + this._documentElement.clientWidth;
      // Title of the page
      data['dt'] = this._document.title;
      // Operating system
      data['pf'] = this._navigator.platform;
      // Marker generated by CB
      data['cba'] = this.getCbaTracker();
      // Any custom data collection for the client
      data['dd'] = this.getDataFromClient();
    } catch (e) { }

    return this.encodeComponent(this._window.btoa(unescape(this.encodeComponent(JSON.stringify(data)))));

  }
  getDataFromClient = function () {
    return '';
  };
  hasApplicationCompleted = function () {
    // Is application completed
    return false;
  }
  cleanup = function () {
    if (this.hasApplicationCompleted()) {
      // cleanup any cookie and storage
      if (this._sessionStorage)
        this._sessionStorage.removeItem(this._cba_tracker_key);
    }
  }
  saveToSessionStorage = function (key, value) {
    try {
      if (this._sessionStorage && value)
        this._sessionStorage.setItem(key, value);
    } catch (e) { }
  };
  encodeComponent = function (value) {
    return encodeURIComponent(value);
  };
  getFromSessionStorage = function (key) {
    if (this._sessionStorage)
      return this._sessionStorage.getItem(key) || '';
  };

  getCbaTracker = function () {
    var cba_tracker = (new URLSearchParams(this._location.search)).get(this._cba_tracker_key);
    if (cba_tracker) {
      this.saveToSessionStorage(this._cba_tracker_key, cba_tracker);
    } else {
      cba_tracker = this.getFromSessionStorage(this._cba_tracker_key);
    }
    // console.error(cba_tracker);
    return cba_tracker;
  };
}
var __cba = new CB_Analytics();
// timeout to ensure that custom code is executed after this line.
setTimeout(function () { __cba.collectData(); }, 0);

//prod or stage
__cba.baseurl = 'http://pix.app1.test/collect?_=';

